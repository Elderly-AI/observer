// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: proto/crawler/crawler.proto

package crawler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrawlerClient is the client API for Crawler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrawlerClient interface {
	GetVkUsersPhotosHandler(ctx context.Context, in *GetVkUsersPhotosHandlerRequest, opts ...grpc.CallOption) (*GetVkUsersPhotosHandlerResponse, error)
}

type crawlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlerClient(cc grpc.ClientConnInterface) CrawlerClient {
	return &crawlerClient{cc}
}

func (c *crawlerClient) GetVkUsersPhotosHandler(ctx context.Context, in *GetVkUsersPhotosHandlerRequest, opts ...grpc.CallOption) (*GetVkUsersPhotosHandlerResponse, error) {
	out := new(GetVkUsersPhotosHandlerResponse)
	err := c.cc.Invoke(ctx, "/crawler.Crawler/GetVkUsersPhotosHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrawlerServer is the server API for Crawler service.
// All implementations must embed UnimplementedCrawlerServer
// for forward compatibility
type CrawlerServer interface {
	GetVkUsersPhotosHandler(context.Context, *GetVkUsersPhotosHandlerRequest) (*GetVkUsersPhotosHandlerResponse, error)
	mustEmbedUnimplementedCrawlerServer()
}

// UnimplementedCrawlerServer must be embedded to have forward compatible implementations.
type UnimplementedCrawlerServer struct {
}

func (UnimplementedCrawlerServer) GetVkUsersPhotosHandler(context.Context, *GetVkUsersPhotosHandlerRequest) (*GetVkUsersPhotosHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVkUsersPhotosHandler not implemented")
}
func (UnimplementedCrawlerServer) mustEmbedUnimplementedCrawlerServer() {}

// UnsafeCrawlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrawlerServer will
// result in compilation errors.
type UnsafeCrawlerServer interface {
	mustEmbedUnimplementedCrawlerServer()
}

func RegisterCrawlerServer(s grpc.ServiceRegistrar, srv CrawlerServer) {
	s.RegisterService(&Crawler_ServiceDesc, srv)
}

func _Crawler_GetVkUsersPhotosHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVkUsersPhotosHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).GetVkUsersPhotosHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.Crawler/GetVkUsersPhotosHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).GetVkUsersPhotosHandler(ctx, req.(*GetVkUsersPhotosHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Crawler_ServiceDesc is the grpc.ServiceDesc for Crawler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crawler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crawler.Crawler",
	HandlerType: (*CrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVkUsersPhotosHandler",
			Handler:    _Crawler_GetVkUsersPhotosHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/crawler/crawler.proto",
}
